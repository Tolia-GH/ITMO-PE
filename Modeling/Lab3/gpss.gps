**********************************************************************************************
*                              Модель СМО G/G/K/E                                            *
**********************************************************************************************
*                           И с х о д н ы е   д а н н ы е                                    *
**********************************************************************************************
E_buf	EQU	8; емкость накопителя (буфера)                                          
t_a	EQU	25; средний интервал между поступающими заявками                        
t_a_min	EQU	10; минимальный интервал между заявками (для равномерного распределения) 
t_a_max	EQU	30; максимальный интервал между заявками (для равномерного распределения)
t_b	EQU	10; средняя длительность обслуживания заявки в приборе                     
RN_a	EQU	20; номер генератора для потока                                          
RN_b	EQU	553; номер генератора для длительности обслуживания                      
* Параметры гиперэкспоненциального распределения:                                            
RN_H	EQU	91; номер генератора для гиперэкспоненциального распределения             
qq	EQU	0.15; вероятность выбора первой фазы                                      
tt_1	EQU	75.31592294; мат. ожидание первой фазы гиперэкспоненциального распределения      
tt_2	EQU	16.12071948; мат. ожидание второй фазы гиперэкспоненциального распределения     
* Параметры гипоэкспоненциального распределения (Эрланга):                                 
k_erl	EQU	2; порядок распределения Эрланга                                      
RN_erl1	EQU	31; номер первого генератора для распределения Эрланга 2-го порядка
RN_erl2	EQU	125; номер второго генератора для распределения Эрланга 2-го порядка 
******************************************************************************************** 
TU_uzel   TABLE	M1,0.2,0.2,50;
TU_buf   	QTABLE	buf1,0.1,0.1,50; 
uzel	STORAGE	1
Erl_2	VARIABLE	(Exponential(RN_erl1,0,t_a/2))+(Exponential(RN_erl2,0,t_a/2)); сл.величина по закону Эрланга 2-го порядка
****************************************************************************
* Служебные переменные, необходимые для процедуры GetRandomNumberFromFile  *
****************************************************************************
ErrorCodes   MATRIX ,2,1  ; Коды ошибок открытия/закрытиия файла (при наличии ошибок в конце моделирования будут записаны ненулевые значения)  
FilePosition MATRIX ,1,1  ; Текущий номер строки в файле, из которой читается число (увеличивается на 1 с каждым чтением)
******************************************************************
* В качестве исполняемого оставить только ОДИН оператор GENERATE *
******************************************************************
*GENERATE	(Exponential(RN_a,0,t_a))
*GENERATE	(GetRandomNumberFromFile("H:\1\ITMO\4 Курс\Модельки\uir1.txt"))
GENERATE	(hyper1(RN_H, qq, tt_1, tt_2))
*GENERATE	V$Erl_2
	TEST	L	Q$buf1,E_buf,zyx
	QUEUE	buf1
*	SEIZE	uzel
	ENTER	uzel
	DEPART	buf1	
	ADVANCE	(Exponential(RN_b,0,t_b))
*	RELEASE	uzel
	LEAVE	uzel
	TABULATE 	TU_uzel
	TERMINATE  1
zyx	TERMINATE  1
**************************************************************
* Процедура возвращает следующее прочитанное из файла число. *
* Числа в файле расположены по одному на каждой строчке.     *
* При выходе за границы файла чтение начинается с начала.    *
**************************************************************
PROCEDURE GetRandomNumberFromFile(FileName) BEGIN
    TEMPORARY OpenError, CloseError, LineFromFile, FileId;
    FileId = 1;
    OpenError = open(FileId,FileName);
    if (OpenError /= 0) then begin
        FileId = 2;
        OpenError = open(FileId,FileName);
        if (OpenError /=0) then begin
            ErrorCodes[1,1] = OpenError;
            return "";
        end;
    end;
    FilePosition[1,1] = FilePosition[1,1] + 1;
    seek(FileId,FilePosition[1,1]);
    LineFromFile = read(FileId);
    if (LineFromFile = "") then begin
        FilePosition[1,1] = 1;
        seek(FileId,FilePosition[1,1]);
        LineFromFile = read(FileId);
    end;
    CloseError = close(FileId);
    if (CloseError /=0) then begin
        ErrorCodes[2,1] = CloseError;
        return "";
    end;
    return value(LineFromFile);
END;
************************************************************
* Процедура возвращает значение псевдослучайной величины,  *
* распределенной по гиперэкспоненциальному закону, в       *
* соответствии с параметрами распределения qq, tt_1, tt_2. *
************************************************************
PROCEDURE hyper1(RN_H, qq, tt_1, tt_2) BEGIN
	if (uniform(1,0,1) < qq) then return exponential(RN_H,0,tt_1);
	else return exponential(RN_H,0,tt_2);		
END;
