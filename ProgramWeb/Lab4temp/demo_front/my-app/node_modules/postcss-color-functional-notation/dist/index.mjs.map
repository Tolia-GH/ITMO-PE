{"version":3,"file":"index.mjs","sources":["../src/on-css-function.ts","../src/index.ts","../src/has-supports-at-rule-ancestor.ts"],"sourcesContent":["import valueParser from 'postcss-value-parser';\nimport type { FunctionNode, Dimension, Node, DivNode, WordNode, SpaceNode } from 'postcss-value-parser';\n\nfunction onCSSFunction(node: FunctionNode) {\n\tconst value = node.value;\n\tlet rawNodes = node.nodes;\n\tif (value === 'rgb' || value === 'hsl') {\n\t\trawNodes = convertOldSyntaxToNewSyntaxBeforeTransform(rawNodes);\n\t}\n\n\tconst relevantNodes = rawNodes.slice().filter((x) => {\n\t\treturn x.type !== 'comment' && x.type !== 'space';\n\t});\n\n\tlet nodes: Rgb | Hsl | null = null;\n\tif (value === 'hsl' || value === 'hsla') {\n\t\tnodes = hslFunctionContents(relevantNodes);\n\t} else if (value === 'rgb' || value === 'rgba') {\n\t\tnodes = rgbFunctionContents(relevantNodes);\n\t}\n\n\tif (!nodes) {\n\t\treturn;\n\t}\n\n\tif (relevantNodes.length > 3 && (!nodes.slash || !nodes.alpha)) {\n\t\treturn;\n\t}\n\n\ttransformAlpha(node, nodes.slash, nodes.alpha);\n\n\t/** Extracted Color channels. */\n\tconst [channelNode1, channelNode2] = channelNodes(nodes);\n\n\tnode.nodes.splice(node.nodes.indexOf(channelNode1) + 1, 0, commaNode());\n\tnode.nodes.splice(node.nodes.indexOf(channelNode2) + 1, 0, commaNode());\n}\n\nexport default onCSSFunction;\n\nfunction commaNode(): DivNode {\n\treturn {\n\t\tsourceIndex: 0,\n\t\tsourceEndIndex: 1,\n\t\tvalue: ',',\n\t\ttype: 'div',\n\t\tbefore: '',\n\t\tafter: '',\n\t};\n}\n\nfunction isNumericNode(node: Node): node is WordNode {\n\tif (!node || node.type !== 'word') {\n\t\treturn false;\n\t}\n\n\tif (!canParseAsUnit(node)) {\n\t\treturn false;\n\t}\n\n\tconst unitAndValue = valueParser.unit(node.value);\n\tif (!unitAndValue) {\n\t\treturn false;\n\t}\n\n\treturn !!unitAndValue.number;\n}\n\nfunction isNumericNodeHueLike(node: Node): node is WordNode {\n\tif (!node || node.type !== 'word') {\n\t\treturn false;\n\t}\n\n\tif (!canParseAsUnit(node)) {\n\t\treturn false;\n\t}\n\n\tconst unitAndValue = valueParser.unit(node.value);\n\tif (!unitAndValue) {\n\t\treturn false;\n\t}\n\n\treturn !!unitAndValue.number && (\n\t\tunitAndValue.unit === 'deg' ||\n\t\tunitAndValue.unit === 'grad' ||\n\t\tunitAndValue.unit === 'rad' ||\n\t\tunitAndValue.unit === 'turn' ||\n\t\tunitAndValue.unit === ''\n\t);\n}\n\nfunction isNumericNodePercentageOrNumber(node: Node): node is WordNode {\n\tif (!node || node.type !== 'word') {\n\t\treturn false;\n\t}\n\n\tif (!canParseAsUnit(node)) {\n\t\treturn false;\n\t}\n\n\tconst unitAndValue = valueParser.unit(node.value);\n\tif (!unitAndValue) {\n\t\treturn false;\n\t}\n\n\treturn unitAndValue.unit === '%' || unitAndValue.unit === '';\n}\n\nfunction isCalcNode(node: Node): node is FunctionNode {\n\treturn node && node.type === 'function' && node.value === 'calc';\n}\n\nfunction isVarNode(node: Node): node is FunctionNode {\n\treturn node && node.type === 'function' && node.value === 'var';\n}\n\nfunction isSlashNode(node: Node): node is DivNode {\n\treturn node && node.type === 'div' && node.value === '/';\n}\n\ntype Hsl = {\n\th: Dimension,\n\thNode: Node,\n\ts: Dimension,\n\tsNode: Node,\n\tl: Dimension,\n\tlNode: Node,\n\tslash?: DivNode,\n\talpha?: WordNode|FunctionNode,\n}\n\nfunction hslFunctionContents(nodes): Hsl|null {\n\tif (!isNumericNodeHueLike(nodes[0])) {\n\t\treturn null;\n\t}\n\n\tif (!isNumericNodePercentageOrNumber(nodes[1])) {\n\t\treturn null;\n\t}\n\n\tif (!isNumericNodePercentageOrNumber(nodes[2])) {\n\t\treturn null;\n\t}\n\n\tconst out: Hsl = {\n\t\th: valueParser.unit(nodes[0].value) as Dimension,\n\t\thNode: nodes[0],\n\t\ts: valueParser.unit(nodes[1].value) as Dimension,\n\t\tsNode: nodes[1],\n\t\tl: valueParser.unit(nodes[2].value) as Dimension,\n\t\tlNode: nodes[2],\n\t};\n\n\tnormalizeHueNode(out.h);\n\tif (out.h.unit !== '') {\n\t\treturn null;\n\t}\n\n\tout.hNode.value = out.h.number;\n\n\tif (isSlashNode(nodes[3])) {\n\t\tout.slash = nodes[3];\n\t}\n\n\tif ((isNumericNodePercentageOrNumber(nodes[4]) || isCalcNode(nodes[4]) || isVarNode(nodes[4]))) {\n\t\tout.alpha = nodes[4];\n\t}\n\n\treturn out;\n}\n\ntype Rgb = {\n\tr: Dimension,\n\trNode: Node,\n\tg: Dimension,\n\tgNode: Node,\n\tb: Dimension,\n\tbNode: Node,\n\tslash?: DivNode,\n\talpha?: WordNode | FunctionNode,\n}\n\nfunction rgbFunctionContents(nodes): Rgb|null {\n\tif (!isNumericNodePercentageOrNumber(nodes[0])) {\n\t\treturn null;\n\t}\n\n\tif (!isNumericNodePercentageOrNumber(nodes[1])) {\n\t\treturn null;\n\t}\n\n\tif (!isNumericNodePercentageOrNumber(nodes[2])) {\n\t\treturn null;\n\t}\n\n\tconst out: Rgb = {\n\t\tr: valueParser.unit(nodes[0].value) as Dimension,\n\t\trNode: nodes[0],\n\t\tg: valueParser.unit(nodes[1].value) as Dimension,\n\t\tgNode: nodes[1],\n\t\tb: valueParser.unit(nodes[2].value) as Dimension,\n\t\tbNode: nodes[2],\n\t};\n\n\tif (out.r.unit === '%') {\n\t\tout.r.number = String(Math.floor(Number(out.r.number) / 100 * 255));\n\t\tout.rNode.value = out.r.number;\n\t}\n\n\tif (out.g.unit === '%') {\n\t\tout.g.number = String(Math.floor(Number(out.g.number) / 100 * 255));\n\t\tout.gNode.value = out.g.number;\n\t}\n\n\tif (out.b.unit === '%') {\n\t\tout.b.number = String(Math.floor(Number(out.b.number) / 100 * 255));\n\t\tout.bNode.value = out.b.number;\n\t}\n\n\tif (isSlashNode(nodes[3])) {\n\t\tout.slash = nodes[3];\n\t}\n\n\tif ((isNumericNodePercentageOrNumber(nodes[4]) || isCalcNode(nodes[4]) || isVarNode(nodes[4]))) {\n\t\tout.alpha = nodes[4];\n\t}\n\n\treturn out;\n}\n\nfunction isRgb(x: Hsl | Rgb): x is Rgb {\n\tif (typeof (x as Rgb).r !== 'undefined') {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\nfunction channelNodes(x: Hsl | Rgb): [Node, Node, Node] {\n\tif (isRgb(x)) {\n\t\treturn [x.rNode, x.gNode, x.bNode];\n\t}\n\n\treturn [x.hNode, x.sNode, x.lNode];\n}\n\nfunction transformAlpha(node: FunctionNode, slashNode: DivNode | undefined, alphaNode: WordNode | FunctionNode | undefined) {\n\tif (node.value === 'hsl' || node.value === 'hsla') {\n\t\tnode.value = 'hsl';\n\t} else if (node.value === 'rgb' || node.value === 'rgba') {\n\t\tnode.value = 'rgb';\n\t}\n\n\tif (!slashNode || !alphaNode) {\n\t\treturn;\n\t}\n\n\tif (node.value === 'hsl') {\n\t\tnode.value = 'hsla';\n\t} else {\n\t\tnode.value = 'rgba';\n\t}\n\n\tslashNode.value = ',';\n\tslashNode.before = '';\n\n\tif (!isNumericNode(alphaNode)) {\n\t\treturn;\n\t}\n\n\tconst unitAndValue = valueParser.unit(alphaNode.value);\n\tif (!unitAndValue) {\n\t\treturn;\n\t}\n\n\tif (unitAndValue.unit === '%') {\n\t\t// transform the Alpha channel from a Percentage to (0-1) Number\n\t\tunitAndValue.number = String(parseFloat(unitAndValue.number) / 100);\n\t\talphaNode.value = String(unitAndValue.number);\n\t}\n}\n\nfunction normalizeHueNode(dimension: Dimension) {\n\tswitch (dimension.unit) {\n\t\tcase 'deg':\n\t\t\tdimension.unit = '';\n\t\t\treturn;\n\t\tcase 'rad':\n\t\t\t// radians -> degrees\n\t\t\tdimension.unit = '';\n\t\t\tdimension.number = Math.round(parseFloat(dimension.number) * 180 / Math.PI).toString();\n\t\t\treturn;\n\n\t\tcase 'grad':\n\t\t\t// grades -> degrees\n\t\t\tdimension.unit = '';\n\t\t\tdimension.number = Math.round(parseFloat(dimension.number) * 0.9).toString();\n\t\t\treturn;\n\n\t\tcase 'turn':\n\t\t\t// turns -> degrees\n\t\t\tdimension.unit = '';\n\t\t\tdimension.number = Math.round(parseFloat(dimension.number) * 360).toString();\n\t\t\treturn;\n\t}\n}\n\nfunction canParseAsUnit(node : Node): boolean {\n\tif (!node || !node.value) {\n\t\treturn false;\n\t}\n\n\ttry {\n\t\treturn valueParser.unit(node.value) !== false;\n\t} catch (e) {\n\t\treturn false;\n\t}\n}\n\nfunction convertOldSyntaxToNewSyntaxBeforeTransform(nodes: Array<Node>): Array<Node> {\n\t// https://www.w3.org/TR/css-color-4/#rgb-functions\n\t// For legacy reasons, rgb() also supports an alternate syntax that separates all of its arguments with commas:\n\t// This also allows alpha values in comma separated `rgb` / `hsl` functions.\n\t//\n\t// This function replaces the first two comma's with spaces and the third with a slash.\n\t// Subsequent comma's are ignored as they are invalid in this syntax.\n\n\tlet commaCounter = 0;\n\tfor (let i = 0; i < nodes.length; i++) {\n\t\tconst node = nodes[i];\n\t\tif (node.type === 'div' && node.value === ',') {\n\t\t\tif (commaCounter < 2) {\n\t\t\t\tnode.value = ' ';\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\t\t((node as any) as SpaceNode).type = 'space';\n\t\t\t}\n\n\t\t\tif (commaCounter === 2) {\n\t\t\t\tnode.value = '/';\n\t\t\t}\n\n\t\t\tif (commaCounter > 2) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcommaCounter++;\n\t\t}\n\t}\n\n\treturn nodes;\n}\n","import valueParser from 'postcss-value-parser';\nimport type { ParsedValue, FunctionNode } from 'postcss-value-parser';\nimport type { Declaration, Postcss, Result } from 'postcss';\nimport onCSSFunction from './on-css-function';\n\nimport type { PluginCreator } from 'postcss';\nimport { hasSupportsAtRuleAncestor } from './has-supports-at-rule-ancestor';\n\n/** Transform lab() and lch() functions in CSS. */\nconst postcssPlugin: PluginCreator<{ preserve: boolean }> = (opts?: { preserve: boolean }) => {\n\tconst preserve = 'preserve' in Object(opts) ? Boolean(opts.preserve) : false;\n\n\treturn {\n\t\tpostcssPlugin: 'postcss-color-functional-notation',\n\t\tDeclaration: (decl: Declaration, { result, postcss }: { result: Result, postcss: Postcss }) => {\n\t\t\tif (preserve && hasSupportsAtRuleAncestor(decl)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst originalValue = decl.value;\n\t\t\tif (!(/(^|[^\\w-])(hsla?|rgba?)\\(/i.test(originalValue))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet valueAST: ParsedValue|undefined;\n\n\t\t\ttry {\n\t\t\t\tvalueAST = valueParser(originalValue);\n\t\t\t} catch (error) {\n\t\t\t\tdecl.warn(\n\t\t\t\t\tresult,\n\t\t\t\t\t`Failed to parse value '${originalValue}' as a hsl or rgb function. Leaving the original value intact.`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (typeof valueAST === 'undefined') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueAST.walk((node) => {\n\t\t\t\tif (!node.type || node.type !== 'function') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tnode.value !== 'hsl' &&\n\t\t\t\t\tnode.value !== 'hsla' &&\n\t\t\t\t\tnode.value !== 'rgb' &&\n\t\t\t\t\tnode.value !== 'rgba'\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tonCSSFunction(node as FunctionNode);\n\t\t\t});\n\t\t\tconst modifiedValue = String(valueAST);\n\n\t\t\tif (modifiedValue === originalValue) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (preserve && decl.variable) {\n\t\t\t\tconst parent = decl.parent;\n\t\t\t\tconst atSupportsParams = '(color: rgb(0 0 0 / 0.5)) and (color: hsl(0 0% 0% / 0.5))';\n\t\t\t\tconst atSupports = postcss.atRule({ name: 'supports', params: atSupportsParams, source: decl.source });\n\n\t\t\t\tconst parentClone = parent.clone();\n\t\t\t\tparentClone.removeAll();\n\n\t\t\t\tparentClone.append(decl.clone());\n\t\t\t\tatSupports.append(parentClone);\n\n\t\t\t\t// Ensure correct order of @supports rules\n\t\t\t\t// Find the last one created by us or the current parent and insert after.\n\t\t\t\tlet insertAfter = parent;\n\t\t\t\tlet nextInsertAfter = parent.next();\n\t\t\t\twhile (\n\t\t\t\t\tinsertAfter &&\n\t\t\t\t\tnextInsertAfter &&\n\t\t\t\t\tnextInsertAfter.type === 'atrule' &&\n\t\t\t\t\tnextInsertAfter.name === 'supports' &&\n\t\t\t\t\tnextInsertAfter.params === atSupportsParams\n\t\t\t\t) {\n\t\t\t\t\tinsertAfter = nextInsertAfter;\n\t\t\t\t\tnextInsertAfter = nextInsertAfter.next();\n\t\t\t\t}\n\n\t\t\t\tinsertAfter.after(atSupports);\n\n\t\t\t\tdecl.value = modifiedValue;\n\t\t\t} else if (preserve) {\n\t\t\t\tdecl.cloneBefore({ value: modifiedValue });\n\t\t\t} else {\n\t\t\t\tdecl.value = modifiedValue;\n\t\t\t}\n\t\t},\n\t};\n};\n\npostcssPlugin.postcss = true;\n\nexport default postcssPlugin;\n","import type { Node, AtRule } from 'postcss';\n\nexport function hasSupportsAtRuleAncestor(node: Node): boolean {\n\tlet parent = node.parent;\n\twhile (parent) {\n\t\tif (parent.type !== 'atrule') {\n\t\t\tparent = parent.parent;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif ((parent as AtRule).name === 'supports' && (parent as AtRule).params.indexOf('(color: rgb(0 0 0 / 0.5)) and (color: hsl(0 0% 0% / 0.5))') !== -1) {\n\t\t\treturn true;\n\t\t}\n\n\t\tparent = parent.parent;\n\t}\n\n\treturn false;\n}\n"],"names":["onCSSFunction","node","value","rawNodes","nodes","commaCounter","i","length","type","convertOldSyntaxToNewSyntaxBeforeTransform","relevantNodes","slice","filter","x","canParseAsUnit","unitAndValue","valueParser","unit","number","isNumericNodeHueLike","isNumericNodePercentageOrNumber","out","h","hNode","s","sNode","l","lNode","dimension","Math","round","parseFloat","PI","toString","normalizeHueNode","isSlashNode","slash","isCalcNode","isVarNode","alpha","hslFunctionContents","r","rNode","g","gNode","b","bNode","String","floor","Number","rgbFunctionContents","slashNode","alphaNode","before","isNumericNode","transformAlpha","channelNode1","channelNode2","isRgb","channelNodes","splice","indexOf","sourceIndex","sourceEndIndex","after","e","postcssPlugin","opts","preserve","Object","Boolean","Declaration","decl","result","postcss","parent","name","params","hasSupportsAtRuleAncestor","originalValue","test","valueAST","error","warn","walk","modifiedValue","variable","atSupportsParams","atSupports","atRule","source","parentClone","clone","removeAll","append","insertAfter","nextInsertAfter","next","cloneBefore"],"mappings":"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"}